#!/usr/bin/env node
"use strict";

let Ls = require("vscode-languageserver");
let LsDoc = require("vscode-languageserver-textdocument");

let connection = Ls.createConnection();
let documents = new Ls.TextDocuments(LsDoc.TextDocument);

function getDiagnostics(textDocument) {
  let text = textDocument.getText();

  let blacklist = ["foo", "bar", "baz"];
  let blocklistRe = blacklist.join("|");
  let regex = new RegExp(`\\b(${blocklistRe})\\b`, "gi");

  let source = "Blacklister";
  let severity = Ls.DiagnosticSeverity.Warning;
  let diagnostics = [];
  for (;;) {
    let match = regex.exec(text);
    if (!match) {
      break;
    }

    let start = textDocument.positionAt(match.index);
    let end = textDocument.positionAt(match.index + match[0].length);
    let message = `${match[0]} is blacklisted.`;

    diagnostics.push({
      severity,
      range: { start, end },
      message,
      source,
    });
  }

  return diagnostics;
}

function initialize() {
  let config = {
    capabilities: {
      textDocumentSync: documents.syncKind,
    },
  };

  return config;
}

function createHandler(ev) {
  function handler(change) {
    console.log(ev, change);
    let diagnostics = getDiagnostics(change.document);
    connection.sendDiagnostics({
      uri: change.document.uri,
      diagnostics: diagnostics,
    });
  }

  return handler;
}

let onOpen = createHandler("open");
let onChange = createHandler("change");
let onSave = createHandler("save");
let beforeSave = createHandler("before:save");
let onClose = createHandler("close");

// vim-ale uses these
connection.onInitialize(initialize);
documents.onDidOpen(onOpen);
documents.onDidChangeContent(onChange);

// other editors may use these
documents.onWillSave(beforeSave);
documents.onDidSave(onSave);
documents.onDidClose(onClose);

// this has a lot under the hood
documents.listen(connection);
connection.listen();
